{"version":3,"sources":["../src/utils/deep-clone.ts","../src/utils/create-event-emmiter.ts","../src/utils/memoize.ts","../src/utils/is-equal.ts","../src/utils/once.ts","../src/utils/debounce.ts","../src/utils/group-by.ts","../src/utils/merge-deep.ts"],"sourcesContent":["/**\r\n * Глубокое клонирование объекта.\r\n * @param obj - Объект для клонирования.\r\n * @returns Глубокая копия объекта.\r\n */\r\nexport function deepClone<T>(obj: T): T {\r\n    if (obj === null || typeof obj !== 'object') {\r\n        return obj;\r\n    }\r\n\r\n    if (obj instanceof Date) {\r\n        return new Date(obj.getTime()) as unknown as T;\r\n    }\r\n\r\n    if (obj instanceof Map) {\r\n        return new Map(Array.from(obj.entries()).map(\r\n            ([key, val]) => [deepClone(key), deepClone(val)]\r\n        )) as unknown as T;\r\n    }\r\n\r\n    if (obj instanceof Set) {\r\n        return new Set(Array.from(obj.values()).map(\r\n            val => deepClone(val)\r\n        )) as unknown as T;\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(item => deepClone(item)) as unknown as T;\r\n    }\r\n\r\n    const clonedObj = {} as Record<string, unknown>;\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            clonedObj[key] = deepClone(obj[key]);\r\n        }\r\n    }\r\n\r\n    return clonedObj as T;\r\n}","type Listener = (...args: unknown[]) => void;\r\n\r\n/**\r\n * Создаёт типизированный объект событийного эмиттера.\r\n * @template T - Строковые ключи событий.\r\n * @returns Объект с методами on, emit, off для управления событиями.\r\n */\r\nexport function createEventEmitter<T extends string>() {\r\n    const listeners: Partial<Record<T, Listener[]>> = {};\r\n\r\n    return {\r\n        on(event: T, listener: Listener) {\r\n            (listeners[event] ??= []).push(listener);\r\n        },\r\n        off(event: T, listener: Listener) {\r\n            const arr = listeners[event];\r\n            if (arr) {\r\n                listeners[event] = arr.filter(l => l !== listener);\r\n            }\r\n        },\r\n        emit(event: T, ...args: unknown[]) {\r\n            listeners[event]?.forEach(listener => listener(...args));\r\n        },\r\n    };\r\n}\r\n","/**\r\n * Кеширует результат вызова функции на основе аргументов.\r\n * @param fn - Исходная функция.\r\n * @returns Мемоизированная функция.\r\n */\r\nexport function memoize<F extends (...args: unknown[]) => unknown>(fn: F): F {\r\n    const cache = new Map<string, ReturnType<F>>();\r\n\r\n    return function (...args: Parameters<F>): ReturnType<F> {\r\n        const key = JSON.stringify(args);\r\n        if (cache.has(key)) {\r\n            return cache.get(key)!;\r\n        }\r\n        const result = fn(...args) as ReturnType<F>;\r\n        cache.set(key, result);\r\n        return result;\r\n    } as F;\r\n}\r\n","/**\r\n * Глубокое сравнение двух значений.\r\n * @param a - Первое значение.\r\n * @param b - Второе значение.\r\n * @returns true, если значения равны, иначе false.\r\n */\r\nexport function isEqual(a: unknown, b: unknown): boolean {\r\n    if (Object.is(a, b)) return true;\r\n\r\n    if (\r\n        typeof a !== 'object' || a === null ||\r\n        typeof b !== 'object' || b === null\r\n    ) return false;\r\n\r\n    const aKeys = Object.keys(a as object);\r\n    const bKeys = Object.keys(b as object);\r\n\r\n    if (aKeys.length !== bKeys.length) return false;\r\n\r\n    return aKeys.every(key =>\r\n        isEqual((a as Record<string, unknown>)[key], (b as Record<string, unknown>)[key])\r\n    );\r\n}\r\n","/**\r\n * Возвращает функцию, которую можно вызвать только один раз.\r\n * @param fn - Исходная функция.\r\n * @returns Функция-обёртка, вызываемая только один раз.\r\n */\r\nexport function once<F extends (...args: unknown[]) => unknown>(fn: F): F {\r\n    let called = false;\r\n    let result: ReturnType<F>;\r\n\r\n    return function (...args: Parameters<F>): ReturnType<F> {\r\n        if (!called) {\r\n            called = true;\r\n            result = fn(...args) as ReturnType<F>;\r\n        }\r\n        return result;\r\n    } as F;\r\n}\r\n","/**\r\n * Декоратор, задерживающий вызов функции до истечения времени задержки.\r\n * @param fn - Исходная функция.\r\n * @param delay - Задержка в миллисекундах.\r\n * @returns Обёрнутая функция с debounce.\r\n */\r\nexport function debounce<F extends (...args: unknown[]) => unknown>(\r\n    fn: F,\r\n    delay: number\r\n): F {\r\n    let timer: ReturnType<typeof setTimeout> | null = null;\r\n\r\n    return function (...args: Parameters<F>) {\r\n        if (timer) clearTimeout(timer);\r\n        timer = setTimeout(() => fn(...args), delay);\r\n    } as F;\r\n}\r\n","/**\r\n * Группирует элементы массива по значению указанного ключа.\r\n * @param array - Массив объектов.\r\n * @param key - Ключ, по которому будет производиться группировка.\r\n * @returns Объект, сгруппированный по ключу.\r\n */\r\nexport function groupBy<T>(array: T[], key: keyof T): Record<string, T[]> {\r\n    return array.reduce((acc, item) => {\r\n        const k = item[key];\r\n        const groupKey = String(k);\r\n        if (!acc[groupKey]) {\r\n            acc[groupKey] = [];\r\n        }\r\n        acc[groupKey].push(item);\r\n        return acc;\r\n    }, {} as Record<string, T[]>);\r\n}\r\n","/**\r\n * Глубокое объединение двух объектов.\r\n * @param a - Первый объект.\r\n * @param b - Второй объект.\r\n * @returns Новый объект, содержащий объединённые значения.\r\n */\r\nexport function mergeDeep<A, B>(a: A, b: B): A & B {\r\n    const result = { ...a } as any;\r\n\r\n    for (const key in b) {\r\n        if (\r\n            typeof b[key] === 'object' &&\r\n            b[key] !== null &&\r\n            !Array.isArray(b[key]) &&\r\n            typeof result[key] === 'object' &&\r\n            result[key] !== null\r\n        ) {\r\n            result[key] = mergeDeep(result[key], b[key]);\r\n        } else {\r\n            result[key] = b[key];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n"],"mappings":"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","names":[]}